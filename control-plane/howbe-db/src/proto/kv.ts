// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.2
// source: kv.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "mvccpb";

export interface KeyValue {
  /** key is the key in bytes. An empty key is not allowed. */
  key: Uint8Array;
  /** value is the value held by the key, in bytes. */
  value: Uint8Array;
}

export interface Event {
  /**
   * type is the kind of event. If type is a PUT, it indicates
   * new data has been stored to the key. If type is a DELETE,
   * it indicates the key was deleted.
   */
  type: Event_EventType;
  /**
   * kv holds the KeyValue for the event.
   * A PUT event contains current kv pair.
   * A PUT event with kv.Version=1 indicates the creation of a key.
   * A DELETE/EXPIRE event contains the deleted key with
   * its modification revision set to the revision of deletion.
   */
  kv:
    | KeyValue
    | undefined;
  /** prev_kv holds the key-value pair before the event happens. */
  prevKv: KeyValue | undefined;
}

export enum Event_EventType {
  PUT = 0,
  DELETE = 1,
  UNRECOGNIZED = -1,
}

export function event_EventTypeFromJSON(object: any): Event_EventType {
  switch (object) {
    case 0:
    case "PUT":
      return Event_EventType.PUT;
    case 1:
    case "DELETE":
      return Event_EventType.DELETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Event_EventType.UNRECOGNIZED;
  }
}

export function event_EventTypeToJSON(object: Event_EventType): string {
  switch (object) {
    case Event_EventType.PUT:
      return "PUT";
    case Event_EventType.DELETE:
      return "DELETE";
    case Event_EventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseKeyValue(): KeyValue {
  return { key: new Uint8Array(0), value: new Uint8Array(0) };
}

export const KeyValue = {
  encode(message: KeyValue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): KeyValue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyValue {
    return {
      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: KeyValue): unknown {
    const obj: any = {};
    if (message.key.length !== 0) {
      obj.key = base64FromBytes(message.key);
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyValue>, I>>(base?: I): KeyValue {
    return KeyValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyValue>, I>>(object: I): KeyValue {
    const message = createBaseKeyValue();
    message.key = object.key ?? new Uint8Array(0);
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEvent(): Event {
  return { type: 0, kv: undefined, prevKv: undefined };
}

export const Event = {
  encode(message: Event, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.kv !== undefined) {
      KeyValue.encode(message.kv, writer.uint32(18).fork()).ldelim();
    }
    if (message.prevKv !== undefined) {
      KeyValue.encode(message.prevKv, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Event {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kv = KeyValue.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.prevKv = KeyValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      type: isSet(object.type) ? event_EventTypeFromJSON(object.type) : 0,
      kv: isSet(object.kv) ? KeyValue.fromJSON(object.kv) : undefined,
      prevKv: isSet(object.prevKv) ? KeyValue.fromJSON(object.prevKv) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = event_EventTypeToJSON(message.type);
    }
    if (message.kv !== undefined) {
      obj.kv = KeyValue.toJSON(message.kv);
    }
    if (message.prevKv !== undefined) {
      obj.prevKv = KeyValue.toJSON(message.prevKv);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.type = object.type ?? 0;
    message.kv = (object.kv !== undefined && object.kv !== null) ? KeyValue.fromPartial(object.kv) : undefined;
    message.prevKv = (object.prevKv !== undefined && object.prevKv !== null)
      ? KeyValue.fromPartial(object.prevKv)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
